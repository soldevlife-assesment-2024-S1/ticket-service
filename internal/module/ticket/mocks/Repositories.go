// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import entity "ticket-service/internal/module/ticket/models/entity"
import mock "github.com/stretchr/testify/mock"

import response "ticket-service/internal/module/ticket/models/response"

// Repositories is an autogenerated mock type for the Repositories type
type Repositories struct {
	mock.Mock
}

// FindTicketByID provides a mock function with given fields: ctx, ticketID
func (_m *Repositories) FindTicketByID(ctx context.Context, ticketID int64) (entity.Ticket, error) {
	ret := _m.Called(ctx, ticketID)

	var r0 entity.Ticket
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.Ticket); ok {
		r0 = rf(ctx, ticketID)
	} else {
		r0 = ret.Get(0).(entity.Ticket)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ticketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTicketByRegionName provides a mock function with given fields: ctx, regionName
func (_m *Repositories) FindTicketByRegionName(ctx context.Context, regionName string) (entity.Ticket, error) {
	ret := _m.Called(ctx, regionName)

	var r0 entity.Ticket
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Ticket); ok {
		r0 = rf(ctx, regionName)
	} else {
		r0 = ret.Get(0).(entity.Ticket)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, regionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTicketDetail provides a mock function with given fields: ctx, ticketID
func (_m *Repositories) FindTicketDetail(ctx context.Context, ticketID int64) (entity.TicketDetail, error) {
	ret := _m.Called(ctx, ticketID)

	var r0 entity.TicketDetail
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.TicketDetail); ok {
		r0 = rf(ctx, ticketID)
	} else {
		r0 = ret.Get(0).(entity.TicketDetail)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ticketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTicketDetailByTicketID provides a mock function with given fields: ctx, ticketID
func (_m *Repositories) FindTicketDetailByTicketID(ctx context.Context, ticketID int64) ([]entity.TicketDetail, error) {
	ret := _m.Called(ctx, ticketID)

	var r0 []entity.TicketDetail
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entity.TicketDetail); ok {
		r0 = rf(ctx, ticketID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TicketDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ticketID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTicketDetails provides a mock function with given fields: ctx, page, pageSize
func (_m *Repositories) FindTicketDetails(ctx context.Context, page int, pageSize int) ([]entity.TicketDetail, int, int, error) {
	ret := _m.Called(ctx, page, pageSize)

	var r0 []entity.TicketDetail
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []entity.TicketDetail); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TicketDetail)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, int, int) int); ok {
		r2 = rf(ctx, page, pageSize)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, int, int) error); ok {
		r3 = rf(ctx, page, pageSize)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// FindTickets provides a mock function with given fields: ctx, page, pageSize
func (_m *Repositories) FindTickets(ctx context.Context, page int, pageSize int) ([]entity.Ticket, int, int, error) {
	ret := _m.Called(ctx, page, pageSize)

	var r0 []entity.Ticket
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []entity.Ticket); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Ticket)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, int, int) int); ok {
		r2 = rf(ctx, page, pageSize)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, int, int) error); ok {
		r3 = rf(ctx, page, pageSize)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetProfile provides a mock function with given fields: ctx, userID
func (_m *Repositories) GetProfile(ctx context.Context, userID int64) (response.Profile, error) {
	ret := _m.Called(ctx, userID)

	var r0 response.Profile
	if rf, ok := ret.Get(0).(func(context.Context, int64) response.Profile); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(response.Profile)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTicketOnline provides a mock function with given fields: ctx, regionName
func (_m *Repositories) GetTicketOnline(ctx context.Context, regionName string) (response.OnlineTicket, error) {
	ret := _m.Called(ctx, regionName)

	var r0 response.OnlineTicket
	if rf, ok := ret.Get(0).(func(context.Context, string) response.OnlineTicket); ok {
		r0 = rf(ctx, regionName)
	} else {
		r0 = ret.Get(0).(response.OnlineTicket)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, regionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// // GetTicketRedis provides a mock function with given fields: ctx
// func (_m *Repositories) GetTicketRedis(ctx context.Context) ([]response.Ticket, error) {
// 	ret := _m.Called(ctx)

// 	var r0 []response.Ticket
// 	if rf, ok := ret.Get(0).(func(context.Context) []response.Ticket); ok {
// 		r0 = rf(ctx)
// 	} else {
// 		if ret.Get(0) != nil {
// 			r0 = ret.Get(0).([]response.Ticket)
// 		}
// 	}

// 	var r1 error
// 	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
// 		r1 = rf(ctx)
// 	} else {
// 		r1 = ret.Error(1)
// 	}

// 	return r0, r1
// }

// // SetTicketRedis provides a mock function with given fields: ctx, tickets
// func (_m *Repositories) SetTicketRedis(ctx context.Context, tickets []response.Ticket) error {
// 	ret := _m.Called(ctx, tickets)

// 	var r0 error
// 	if rf, ok := ret.Get(0).(func(context.Context, []response.Ticket) error); ok {
// 		r0 = rf(ctx, tickets)
// 	} else {
// 		r0 = ret.Error(0)
// 	}

// 	return r0
// }

// UpdateTicketDetail provides a mock function with given fields: ctx, ticketDetail
func (_m *Repositories) UpdateTicketDetail(ctx context.Context, ticketDetail entity.TicketDetail) error {
	ret := _m.Called(ctx, ticketDetail)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.TicketDetail) error); ok {
		r0 = rf(ctx, ticketDetail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateToken provides a mock function with given fields: ctx, token
func (_m *Repositories) ValidateToken(ctx context.Context, token string) (response.UserServiceValidate, error) {
	ret := _m.Called(ctx, token)

	var r0 response.UserServiceValidate
	if rf, ok := ret.Get(0).(func(context.Context, string) response.UserServiceValidate); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(response.UserServiceValidate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

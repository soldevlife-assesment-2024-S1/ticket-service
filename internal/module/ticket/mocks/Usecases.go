// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import response "ticket-service/internal/module/ticket/models/response"

// Usecases is an autogenerated mock type for the Usecases type
type Usecases struct {
	mock.Mock
}

// CheckStockTicket provides a mock function with given fields: ctx, ticketDetailID
func (_m *Usecases) CheckStockTicket(ctx context.Context, ticketDetailID int) (response.StockTicket, error) {
	ret := _m.Called(ctx, ticketDetailID)

	var r0 response.StockTicket
	if rf, ok := ret.Get(0).(func(context.Context, int) response.StockTicket); ok {
		r0 = rf(ctx, ticketDetailID)
	} else {
		r0 = ret.Get(0).(response.StockTicket)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, ticketDetailID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecrementTicketStock provides a mock function with given fields: ctx, ticketDetailID, totalTicket
func (_m *Usecases) DecrementTicketStock(ctx context.Context, ticketDetailID int64, totalTicket int64) error {
	ret := _m.Called(ctx, ticketDetailID, totalTicket)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, ticketDetailID, totalTicket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTicketByRegionName provides a mock function with given fields: ctx, regionName
func (_m *Usecases) GetTicketByRegionName(ctx context.Context, regionName string) ([]response.Ticket, error) {
	ret := _m.Called(ctx, regionName)

	var r0 []response.Ticket
	if rf, ok := ret.Get(0).(func(context.Context, string) []response.Ticket); ok {
		r0 = rf(ctx, regionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.Ticket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, regionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementTicketStock provides a mock function with given fields: ctx, ticketDetailID, totalTicket
func (_m *Usecases) IncrementTicketStock(ctx context.Context, ticketDetailID int64, totalTicket int64) error {
	ret := _m.Called(ctx, ticketDetailID, totalTicket)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, ticketDetailID, totalTicket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InquiryTicketAmount provides a mock function with given fields: ctx, ticketID, totalTicket
func (_m *Usecases) InquiryTicketAmount(ctx context.Context, ticketID int64, totalTicket int) (response.InquiryTicketAmount, error) {
	ret := _m.Called(ctx, ticketID, totalTicket)

	var r0 response.InquiryTicketAmount
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) response.InquiryTicketAmount); ok {
		r0 = rf(ctx, ticketID, totalTicket)
	} else {
		r0 = ret.Get(0).(response.InquiryTicketAmount)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int) error); ok {
		r1 = rf(ctx, ticketID, totalTicket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowTickets provides a mock function with given fields: ctx, page, pageSize, userID
func (_m *Usecases) ShowTickets(ctx context.Context, page int, pageSize int, userID int64) ([]response.Ticket, int, int, error) {
	ret := _m.Called(ctx, page, pageSize, userID)

	var r0 []response.Ticket
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int64) []response.Ticket); ok {
		r0 = rf(ctx, page, pageSize, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.Ticket)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int64) int); ok {
		r1 = rf(ctx, page, pageSize, userID)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, int, int, int64) int); ok {
		r2 = rf(ctx, page, pageSize, userID)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, int, int, int64) error); ok {
		r3 = rf(ctx, page, pageSize, userID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
